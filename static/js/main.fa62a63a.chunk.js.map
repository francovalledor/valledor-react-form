{"version":3,"sources":["../../src/components/SimpleForm/utils.js","../../src/components/SimpleForm/index.js","App.js","index.js"],"names":["renderTypeGeneral","field","classes","index","key","className","renderLabel","type","name","placeholder","autoFocus","tabIndex","defaultValue","required","renderNote","renderValidMessage","renderInvalidMessage","htmlFor","SimpleForm","props","itsOK","checkParams","onSubmit","e","onChange","onBlur","renderTitle","value","renderTypeSubmit","console","App","fields","push","note","label","isValid","validMessage","invalidMessage","preventDefault","log","title","ReactDOM","render","document","getElementById"],"mappings":"kMAqBO,SAASA,EAAkBC,EAAOC,EAASC,GAChD,OACE,yBAAKC,IAAKH,EAAV,KAAsBI,UAAU,cAC7BC,EADH,GAEE,2BACEC,KAAMN,EADR,KAEEO,KAAMP,EAFR,KAGEI,UAHF,EAIEI,YAAaR,EAJf,YAKES,UALF,IAKaP,EACXQ,SAAUR,IACVS,aAAcX,EAPhB,MAQEY,SAAUZ,aAAkB,IAE7Ba,EAZH,GAgFG,SAA4Bb,GACjC,OAAIA,EAAJ,aACS,yBAAKI,UAAU,kBAAkBJ,EAAxC,cAEA,GAvEGc,CAbH,GAwFG,SAA8Bd,GACnC,OAAIA,EAAJ,eACS,yBAAKI,UAAU,oBAAoBJ,EAA1C,gBAEA,GA9EGe,CAfL,IA6DK,SAASF,EAAWb,GACzB,OAAIA,EAAJ,KACS,2BAAOI,UAAU,cAAcJ,EAAtC,MAEA,GAIG,SAASK,EAAYL,GAC1B,OAAIA,EAAJ,MAEI,2BAAOI,UAAP,OAAwBY,QAAShB,EAAMO,MACpCP,EAFL,OAMA,GCpEG,SAASiB,EAAWC,GAuDzB,OApDA,WACE,IAAIC,GAAJ,EAMA,OAJKD,EAAD,QAAkBA,SAAtB,MACEC,MAGF,EA6CEC,GAEA,0BACEC,SAtCN,YACEC,mBACIJ,EAAJ,UACEA,eAoCEK,SA7CN,YACML,EAAJ,UACEA,eA4CEM,OAjCN,YACMN,EAAJ,QACEA,cAiCI,4BALJ,QDbC,SAAqBA,GAC1B,OAAIA,EAAJ,MACS,wBAAId,UAAU,QAAQc,EAA7B,OAEA,GCiBKO,CARH,GArBKP,EAAA,YAAiB,YACtB,IAAIjB,EAAJ,eAOA,OANA,IAAID,UACFC,gBACK,IAAID,YACTC,kBAGF,WAAID,qBDzEH,SAA0BA,EAAOC,EAASC,GAC/C,OACE,yBAAKC,IAAKH,EAAV,KAAsBI,UAAU,cAC7BC,EADH,GAEE,2BACEC,KAAMN,EADR,KAEEO,KAAMP,EAFR,KAGEI,UAHF,EAIEI,YAAaR,EAJf,YAKES,UALF,IAKaP,EACXQ,SAAUR,IACVwB,MAAO1B,EAPT,MAQEY,SAAUZ,aAAkB,IAE7Ba,EAbL,ICyEac,CAAiB3B,EAAOC,EAVnC,GAYWF,EAAkBC,EAAOC,EAZpC,QAmCA2B,4CACA,I,IClCWC,EAhEH,WACV,IAAIC,EAAS,GAmDb,OAjDAA,EAAOC,KAAK,CACVxB,KAAM,WACND,KAAM,OACNE,YAAa,WACbI,UAAU,IAGZkB,EAAOC,KAAK,CACVxB,KAAM,WACND,KAAM,WACNE,YAAa,WACbwB,KAAM,mDAGRF,EAAOC,KAAK,CACVE,MAAO,gBACP1B,KAAM,OACND,KAAM,OACNoB,MAAO,aACPQ,SAAS,EACTC,aAAc,aACdC,eAAgB,uBAGlBN,EAAOC,KAAK,CACVxB,KAAM,QACND,KAAM,QACNE,YAAa,kBACbkB,MAAO,2BACPd,UAAU,IAGZkB,EAAOC,KAAK,CACVxB,KAAM,SACND,KAAM,SACNoB,MAAO,UACPd,UAAU,IAcV,yBAAKR,UAAU,sBACb,kBAACa,EAAD,CACEM,SARN,SAAkBD,GAChBA,EAAEe,iBACFT,QAAQU,IAAI,WAORjB,SAdN,SAAkBC,GAChBA,EAAEe,iBACFT,QAAQU,IAAI,WAaRC,MAAM,OACNT,OAAQA,M,OCtDhBU,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.fa62a63a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function renderTypeSubmit(field, classes, index) {\r\n  return (\r\n    <div key={field.name} className=\"form-group\">\r\n      {renderLabel(field)}\r\n      <input\r\n        type={field.type}\r\n        name={field.name}\r\n        className={classes}\r\n        placeholder={field.placeholder}\r\n        autoFocus={index === 1}\r\n        tabIndex={index++}\r\n        value={field.value}\r\n        required={field.required || false}\r\n      />\r\n      {renderNote(field)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function renderTypeGeneral(field, classes, index) {\r\n  return (\r\n    <div key={field.name} className=\"form-group\">\r\n      {renderLabel(field)}\r\n      <input\r\n        type={field.type}\r\n        name={field.name}\r\n        className={classes}\r\n        placeholder={field.placeholder}\r\n        autoFocus={index === 1}\r\n        tabIndex={index++}\r\n        defaultValue={field.value}\r\n        required={field.required || false}\r\n      />\r\n      {renderNote(field)}\r\n      {renderValidMessage(field)}\r\n      {renderInvalidMessage(field)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function renderTypeSelect(field, classes, index) {\r\n  function renderOptions(field) {\r\n    if (field.options && field.options.map) {\r\n      return field.options.map((option) => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.text || option.value}\r\n        </option>\r\n      ));\r\n    } else return \"\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div key={field.name} className=\"form-group\">\r\n        {renderLabel(field)}\r\n        <select\r\n          name={field.name}\r\n          className={classes}\r\n          autoFocus={index === 1}\r\n          tabIndex={index++}\r\n          defaultValue={field.value}\r\n          required={field.required || false}\r\n        >\r\n          {renderOptions(field)}\r\n        </select>\r\n        {renderNote(field)}\r\n        {renderValidMessage(field)}\r\n        {renderInvalidMessage(field)}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function renderTitle(props) {\r\n  if (props.title) {\r\n    return <h3 className=\"mt-2\">{props.title}</h3>;\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function renderNote(field) {\r\n  if (field.note) {\r\n    return <small className=\"text-muted\">{field.note}</small>;\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function renderLabel(field) {\r\n  if (field.label) {\r\n    return (\r\n      <label className=\"mt-2\" htmlFor={field.name}>\r\n        {field.label}\r\n      </label>\r\n    );\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function renderValidMessage(field) {\r\n  if (field.validMessage) {\r\n    return <div className=\"valid-feedback\">{field.validMessage}</div>;\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function renderInvalidMessage(field) {\r\n  if (field.invalidMessage) {\r\n    return <div className=\"invalid-feedback\">{field.invalidMessage}</div>;\r\n  } else {\r\n    return \"\";\r\n  }\r\n}","import React from 'react'\r\nimport {\r\n    renderInvalidMessage,\r\n    renderLabel,\r\n    renderNote,\r\n    renderTitle,\r\n    renderTypeGeneral,\r\n    renderTypeSubmit,\r\n    renderValidMessage\r\n} from './utils';\r\n\r\n/**\r\n * ## Create a simple form\r\n *\r\n * @callback onChange\r\n * @callback onSubmit\r\n * @callback onBlur\r\n * @param {array} fields - Array containing form's fields (<input>)\r\n * @param {string} fields[].name - <input>'s name\r\n * @param {string} fields[].type - <input>'s type\r\n * @param {string} [ fields[].placeholder ] - optional <input>'s placeholder\r\n * @param {string} [ fields[].label ] - optional <input>'s label\r\n * @param {string} [ fields[].note ] - optional <input>'s note\r\n *\r\n * @param {string} [title] - optional form's title\r\n * @param {function} [onChange] - optional function for fields change handling\r\n * @param {function} [onSubmit] - optional function for form submit handling\r\n * @param {function} [onBlur] - optional function for focus out handling\r\n * @version 1.0.0\r\n * @author [Franco Valledor](https://github.com/francovalledor)\r\n */\r\nexport function SimpleForm(props) {\r\n  // FUNCTIONS\r\n  // Validations\r\n  function checkParams() {\r\n    let itsOK = true\r\n\r\n    if (!props.fields || !props.fields.map) {\r\n      itsOK = false\r\n    }\r\n\r\n    return itsOK\r\n  }\r\n\r\n  // Event Handlers\r\n  function handleChange(e) {\r\n    if (props.onChange) {\r\n      props.onChange(e)\r\n    }\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    if (props.onSubmit) {\r\n      props.onSubmit(e)\r\n    }\r\n  }\r\n\r\n  function handleFocusOut(e) {\r\n    if (props.onBlur) {\r\n      props.onBlur(e)\r\n    }\r\n  }\r\n\r\n\r\n  function renderFields(fields) {\r\n    let index = 1\r\n    return props.fields.map((field) => {\r\n      let classes = 'form-control'\r\n      if (field.isValid === true) {\r\n        classes += ' is-valid'\r\n      } else if (field.isValid === false) {\r\n        classes += ' is-invalid'\r\n      }\r\n\r\n      if (field.type.toLowerCase() === 'submit') {\r\n        return renderTypeSubmit(field, classes, index)\r\n      } else {\r\n        return renderTypeGeneral(field, classes, index)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *    BODY\r\n   */\r\n  if (checkParams()) {\r\n    return (\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        onChange={handleChange}\r\n        onBlur={handleFocusOut}\r\n      >\r\n          <h1>\r\n              Hola\r\n          </h1>\r\n        {renderTitle(props)}\r\n        {renderFields(props.fields)}\r\n      </form>\r\n    )\r\n  } else {\r\n    console.error('CreateForm: Missing params')\r\n    return ''\r\n  }\r\n}\r\n\r\nexport default SimpleForm\r\n","import React from 'react'\r\n\r\nimport { SimpleForm } from 'valledor-react-form'\r\n\r\nconst App = () => {\r\n  let fields = []\r\n\r\n  fields.push({\r\n    name: 'username',\r\n    type: 'text',\r\n    placeholder: 'Username',\r\n    required: true\r\n  })\r\n\r\n  fields.push({\r\n    name: 'password',\r\n    type: 'password',\r\n    placeholder: 'Password',\r\n    note: 'must include letters in mixed case and numbers'\r\n  })\r\n\r\n  fields.push({\r\n    label: 'Date of birth',\r\n    name: 'date',\r\n    type: 'date',\r\n    value: '2020-12-02',\r\n    isValid: true,\r\n    validMessage: 'Looks good',\r\n    invalidMessage: \"Doesn't looks good\"\r\n  })\r\n\r\n  fields.push({\r\n    name: 'email',\r\n    type: 'email',\r\n    placeholder: 'email@email.com',\r\n    value: 'francovalledor@gmail.com',\r\n    required: true\r\n  })\r\n\r\n  fields.push({\r\n    name: 'submit',\r\n    type: 'submit',\r\n    value: 'Sign In',\r\n    required: true\r\n  })\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault()\r\n    console.log('submit')\r\n  }\r\n\r\n  function onChange(e) {\r\n    e.preventDefault()\r\n    console.log('change')\r\n  }\r\n\r\n  return (\r\n    <div className='container p-2 mt-4'>\r\n      <SimpleForm\r\n        onChange={onChange}\r\n        onSubmit={onSubmit}\r\n        title='HOLA'\r\n        fields={fields}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\nimport \"bootstrap\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}