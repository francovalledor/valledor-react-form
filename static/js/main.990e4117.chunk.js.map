{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["SimpleForm","props","field","className","htmlFor","name","itsOK","checkParams","onSubmit","e","onChange","onBlur","index","classes","key","renderLabel","type","placeholder","autoFocus","tabIndex","value","required","renderNote","defaultValue","renderValidMessage","renderInvalidMessage","renderFields","console","App","fields","push","note","label","isValid","validMessage","invalidMessage","preventDefault","log","title","ReactDOM","render","document","getElementById"],"mappings":"gOAsBO,SAASA,EAAWC,GAyCzB,cACE,OAAIC,EAAJ,KACS,2BAAOC,UAAU,cAAcD,EAAtC,MAEA,GAIJ,cACE,OAAIA,EAAJ,MAEI,2BAAOC,UAAP,OAAwBC,QAASF,EAAMG,MACpCH,EAFL,OAMA,GAyEJ,OA/HA,WACE,IAAII,GAAJ,EAMA,OAJKL,EAAD,QAAkBA,SAAtB,MACEK,MAGF,EAwHEC,GAEA,0BACEC,SAjHN,YACEC,mBACIR,EAAJ,UACEA,eA+GES,SAxHN,YACMT,EAAJ,UACEA,eAuHEU,OA5GN,YACMV,EAAJ,QACEA,cAKEA,EAAJ,MACS,4BAAKA,EAAZ,OAEA,GAwCJ,YACE,IAAIW,EAAJ,EACA,OAAOX,EAAA,YAAkBC,YACvB,IAAIW,EAAJ,eAOA,OANA,IAAIX,UACFW,gBACK,IAAIX,YACTW,kBAGF,WAAIX,qBAEA,yBAAKY,IAAKZ,EAAV,KAAsBC,UAAU,cAC7BY,EADH,GAEE,2BACEC,KAAMd,EADR,KAEEG,KAAMH,EAFR,KAGEC,UAHF,EAIEc,YAAaf,EAJf,YAKEgB,UALF,IAKaN,EACXO,SAAUP,IACVQ,MAAOlB,EAPT,MAQEmB,SAAUnB,aAAkB,IAE7BoB,EAbL,IAkBE,yBAAKR,IAAKZ,EAAV,KAAsBC,UAAU,cAC7BY,EADH,GAEE,2BACEC,KAAMd,EADR,KAEEG,KAAMH,EAFR,KAGEC,UAHF,EAIEc,YAAaf,EAJf,YAKEgB,UALF,IAKaN,EACXO,SAAUP,IACVW,aAAcrB,EAPhB,MAQEmB,SAAUnB,aAAkB,IAE7BoB,EAZH,GA7CR,YACE,OAAIpB,EAAJ,aACS,yBAAKC,UAAU,kBAAkBD,EAAxC,cAEA,GAsDOsB,CAbH,GArCR,YACE,OAAItB,EAAJ,eACS,yBAAKC,UAAU,oBAAoBD,EAA1C,gBAEA,GA+COuB,CAfL,OAiCCC,KAILC,4CACA,I,UCjGWC,EA7DH,WACV,IAAIC,EAAS,GAoDb,OAlDAA,EAAOC,KAAK,CACVzB,KAAM,WACNW,KAAM,OACNC,YAAa,WACbI,UAAU,IAGZQ,EAAOC,KAAK,CACVzB,KAAM,WACNW,KAAM,WACNC,YAAa,WACbc,KAAM,mDAGRF,EAAOC,KAAK,CACVE,MAAO,gBACP3B,KAAM,OACNW,KAAM,OACNI,MAAO,aACPa,SAAS,EACTC,aAAc,aACdC,eAAgB,uBAGlBN,EAAOC,KAAK,CACVzB,KAAM,QACNW,KAAM,QACNC,YAAa,kBACbG,MAAO,2BACPC,UAAU,IAGZQ,EAAOC,KAAK,CACVzB,KAAM,SACNW,KAAM,SACNI,MAAO,UACPC,UAAU,IAcL,kBAACrB,EAAD,CACPU,SAPA,SAAkBD,GAChBA,EAAE2B,iBACFT,QAAQU,IAAI,WAMd7B,SAbA,SAAkBC,GAChBA,EAAE2B,iBACFT,QAAQU,IAAI,WAYdC,MAAM,UACNT,OAAQA,KCxDVU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.990e4117.chunk.js","sourcesContent":["import React from 'react'\n\n/**\n * ## Create a simple form\n *\n * @callback onChange\n * @callback onSubmit\n * @callback onBlur\n * @param {array} fields - Array containing form's fields (<input>)\n * @param {string} fields[].name - <input>'s name\n * @param {string} fields[].type - <input>'s type\n * @param {string} [ fields[].placeholder ] - optional <input>'s placeholder\n * @param {string} [ fields[].label ] - optional <input>'s label\n * @param {string} [ fields[].note ] - optional <input>'s note\n *\n * @param {string} [title] - optional form's title\n * @param {function} [onChange] - optional function for fields change handling\n * @param {function} [onSubmit] - optional function for form submit handling\n * @param {function} [onBlur] - optional function for focus out handling\n * @version 1.0.0\n * @author [Franco Valledor](https://github.com/francovalledor)\n */\nexport function SimpleForm(props) {\n  // FUNCTIONS\n  // Validations\n  function checkParams() {\n    let itsOK = true\n\n    if (!props.fields || !props.fields.map) {\n      itsOK = false\n    }\n\n    return itsOK\n  }\n\n  // Event Handlers\n  function handleChange(e) {\n    if (props.onChange) {\n      props.onChange(e)\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    if (props.onSubmit) {\n      props.onSubmit(e)\n    }\n  }\n\n  function handleFocusOut(e) {\n    if (props.onBlur) {\n      props.onBlur(e)\n    }\n  }\n\n  function renderTitle() {\n    if (props.title) {\n      return <h3>{props.title}</h3>\n    } else {\n      return ''\n    }\n  }\n\n  function renderNote(field) {\n    if (field.note) {\n      return <small className='text-muted'>{field.note}</small>\n    } else {\n      return ''\n    }\n  }\n\n  function renderLabel(field) {\n    if (field.label) {\n      return (\n        <label className='mt-2' htmlFor={field.name}>\n          {field.label}\n        </label>\n      )\n    } else {\n      return ''\n    }\n  }\n\n  function renderValidMessage(field) {\n    if (field.validMessage) {\n      return <div className='valid-feedback'>{field.validMessage}</div>\n    } else {\n      return ''\n    }\n  }\n\n  function renderInvalidMessage(field) {\n    if (field.invalidMessage) {\n      return <div className='invalid-feedback'>{field.invalidMessage}</div>\n    } else {\n      return ''\n    }\n  }\n\n  function renderFields(fields) {\n    let index = 1\n    return props.fields.map((field) => {\n      let classes = 'form-control'\n      if (field.isValid === true) {\n        classes += ' is-valid'\n      } else if (field.isValid === false) {\n        classes += ' is-invalid'\n      }\n\n      if (field.type.toLowerCase() === 'submit') {\n        return (\n          <div key={field.name} className='form-group'>\n            {renderLabel(field)}\n            <input\n              type={field.type}\n              name={field.name}\n              className={classes}\n              placeholder={field.placeholder}\n              autoFocus={index === 1}\n              tabIndex={index++}\n              value={field.value}\n              required={field.required || false}\n            />\n            {renderNote(field)}\n          </div>\n        )\n      } else {\n        return (\n          <div key={field.name} className='form-group'>\n            {renderLabel(field)}\n            <input\n              type={field.type}\n              name={field.name}\n              className={classes}\n              placeholder={field.placeholder}\n              autoFocus={index === 1}\n              tabIndex={index++}\n              defaultValue={field.value}\n              required={field.required || false}\n            />\n            {renderNote(field)}\n            {renderValidMessage(field)}\n            {renderInvalidMessage(field)}\n          </div>\n        )\n      }\n    })\n  }\n\n  /**\n   *    BODY\n   */\n  if (checkParams()) {\n    return (\n      <form\n        onSubmit={handleSubmit}\n        onChange={handleChange}\n        onBlur={handleFocusOut}\n      >\n        {renderTitle()}\n        {renderFields(props.fields)}\n      </form>\n    )\n  } else {\n    console.error('CreateForm: Missing params')\n    return ''\n  }\n}\n\nexport default SimpleForm\n","import React from 'react'\n\nimport { SimpleForm } from 'valledor-react-form'\nimport 'valledor-react-form/dist/index.css'\n\n\n\nconst App = () => {\n  let fields = []\n\n  fields.push({\n    name: \"username\",\n    type: \"text\",\n    placeholder: \"Username\",\n    required: true\n  });\n\n  fields.push({\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    note: \"must include letters in mixed case and numbers\"\n  });\n\n  fields.push({\n    label: \"Date of birth\",\n    name: \"date\",\n    type: \"date\",\n    value: \"2020-12-02\",\n    isValid: true,\n    validMessage: \"Looks good\",\n    invalidMessage: \"Doesn't looks good\"\n  });\n\n  fields.push({\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"email@email.com\",\n    value: \"francovalledor@gmail.com\",\n    required: true\n  });\n  \n  fields.push({\n    name: \"submit\",\n    type: \"submit\",\n    value: \"Sign In\",\n    required: true\n  });\n\n  function onSubmit(e) {\n    e.preventDefault();\n    console.log(\"submit\");\n  }\n\n  function onChange(e) {\n    e.preventDefault();\n    console.log(\"change\");\n  }\n\n\n  return <SimpleForm\n  onChange={onChange}\n  onSubmit={onSubmit}\n  title=\"Sign Up\"\n  fields={fields}\n/>\n}\n\nexport default App\n","import './index.css'\nimport \"bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}